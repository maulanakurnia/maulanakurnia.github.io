{"version":3,"sources":["component/Button.jsx","App.js","serviceWorker.js","index.js"],"names":["ButtonSocial","href","Button","color","Icon","name","Title","styled","h1","Desc","p","App","className","role","aria-label","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wXAsBeA,EApBM,kBACnB,6BACE,uBAAGC,KAAK,2CACJ,kBAACC,EAAA,EAAD,CAAQC,MAAM,WACd,kBAACC,EAAA,EAAD,CAAMC,KAAK,YADX,aAIJ,uBAAGJ,KAAK,wCACJ,kBAACC,EAAA,EAAD,CAAQC,MAAM,SACd,kBAACC,EAAA,EAAD,CAAMC,KAAK,WADX,YAIJ,uBAAGJ,KAAK,6CACJ,kBAACC,EAAA,EAAD,KACA,kBAACE,EAAA,EAAD,CAAMC,KAAK,cADX,iB,gRCRR,IAAMC,EAAQC,IAAOC,GAAV,KAILC,EAAOF,IAAOG,EAAV,KAwBKC,E,uKAbX,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cACd,kBAAC,IAAD,CAAQT,MAAM,YACd,kBAACG,EAAD,gDACA,kBAACG,EAAD,yBAAuB,0BAAMI,KAAK,MAAMC,aAAW,SAA5B,gBAAvB,KACA,kBAAC,EAAD,Y,GARMC,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9de5e2ad.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Icon} from 'semantic-ui-react';\nconst ButtonSocial = () => (\n  <div>\n    <a href=\"https://www.twitter.com/maulanaakurniaa\">\n        <Button color='twitter'>\n        <Icon name='twitter' /> Twitter\n        </Button>\n    </a>\n    <a href=\"https://www.github.com/maulanakurnia\">\n        <Button color='black'>\n        <Icon name='github' /> Github\n        </Button>\n    </a>\n    <a href=\"https://www.instagram.com/maulanaakurniaa\">\n        <Button>\n        <Icon name='instagram' /> Instagram\n        </Button>\n    </a>\n  </div>\n)\n\nexport default ButtonSocial","import React, { Component } from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport styled from 'styled-components';\nimport Ripple from '@bit/joshk.react-spinners-css.ripple';\nimport ButtonSocial from './component/Button';\n\nconst Title = styled.h1`\n  color: #cfc61f;\n`;\n\nconst Desc = styled.p`\n  margin-top: -1rem;\n  margin-bottom: 4rem;\n  // font-style: italic;\n  color: #1f88cf;\n  font-size: 21px;\n`;\n\n\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            <Ripple color=\"#1f88cf\"/>\n            <Title>We'r working hard to bring new version.</Title>\n            <Desc>Come back later. <span role=\"img\" aria-label='smile'>ðŸ˜Š</span> </Desc>\n            <ButtonSocial/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}